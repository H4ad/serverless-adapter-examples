export const id=404;export const ids=[404];export const modules={80404:(e,r,n)=>{n.r(r),n.d(r,{ApolloServerPluginInlineTrace:()=>o});var t=n(40279),l=n(58289),i=n(13321),s=n(95721);function o(e=Object.create(null)){let r=!e.__onlyIfSchemaIsSubgraph||null;return(0,i.U)({__internal_plugin_id__:"InlineTrace",__is_disabled_plugin__:!1,async serverWillStart({schema:e,logger:n}){null===r&&(r=(0,s.X)(e),r&&n.info("Enabling inline tracing for this subgraph. To disable, use ApolloServerPluginInlineTraceDisabled."))},async requestDidStart({request:{http:n},metrics:i,logger:s}){if(!r)return;const o=new l.X({maskedBy:"ApolloServerPluginInlineTrace",sendErrors:e.includeErrors,logger:s});return"ftv1"===n?.headers.get("apollo-federation-include-trace")&&!1!==i.captureTraces?(i.captureTraces=!0,o.startTiming(),{executionDidStart:async()=>({willResolveField:({info:e})=>o.willResolveField(e)}),async didEncounterErrors({errors:e}){o.didEncounterErrors(e)},async willSendResponse({response:e}){if(o.stopTiming(),"incremental"===e.body.kind)return;i.queryPlanTrace&&(o.trace.queryPlan=i.queryPlanTrace);const r=t.fM.encode(o.trace).finish(),n=Buffer.from(r,r.byteOffset,r.byteLength),l=e.body.singleResult.extensions||(e.body.singleResult.extensions=Object.create(null));if(void 0!==l.ftv1)throw new Error("The `ftv1` extension was already present.");l.ftv1=n.toString("base64")}}):void 0}})}}};